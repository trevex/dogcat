// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/NucleusEngineering/dogcat/chapter02b/ent/db/score"
)

// Score is the model entity for the Score schema.
type Score struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Score holds the value of the "score" field.
	Score int `json:"score,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Score) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case score.FieldID, score.FieldScore:
			values[i] = new(sql.NullInt64)
		case score.FieldUsername:
			values[i] = new(sql.NullString)
		case score.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Score", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Score fields.
func (s *Score) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case score.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case score.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case score.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				s.Username = value.String
			}
		case score.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				s.Score = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Score.
// Note that you need to call Score.Unwrap() before calling this method if this Score
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Score) Update() *ScoreUpdateOne {
	return (&ScoreClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Score entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Score) Unwrap() *Score {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("db: Score is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Score) String() string {
	var builder strings.Builder
	builder.WriteString("Score(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(s.Username)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", s.Score))
	builder.WriteByte(')')
	return builder.String()
}

// Scores is a parsable slice of Score.
type Scores []*Score

func (s Scores) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
