options:
  logging: CLOUD_LOGGING_ONLY
steps:
- id: 'target env'
  name: 'alpine'
  entrypoint: 'sh'
  args:
  - '-c'
  - |
      echo "***********************"
      echo "${_TARGET_ENV}"
      echo "***********************"

- id: 'tf init'
  name: 'hashicorp/terraform:1.2.5'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    cd chapter02a
    ALL_ENV="${_PLAN_ENV},${_TARGET_ENV}"
    IFS=","
    for ENV in $ALL_ENV; do
      if [ ! -z "${ENV}" ] && [ -d "environments/${ENV}" ]; then
        echo ""
        echo "*************** TERRAFORM INIT ******************"
        echo "******* At environment: ${ENV} ********"
        echo "*************************************************"
        terraform -chdir="environments/${ENV}" init || exit 1
      fi
    done

# - id: 'tf plan'
#   name: 'hashicorp/terraform:1.2.5'
#   entrypoint: 'sh'
#   args:
#   - '-c'
#   - |
#       if [ -d "environments/$BRANCH_NAME/" ]; then
#         cd environments/$BRANCH_NAME
#         terraform plan
#       else
#         for dir in environments/*/
#         do
#           cd ${dir}
#           env=${dir%*/}
#           env=${env#*/}
#           echo ""
#           echo "*************** TERRAFOM PLAN ******************"
#           echo "******* At environment: ${env} ********"
#           echo "*************************************************"
#           terraform plan || exit 1
#           cd ../../
#         done
#       fi

# - id: 'tf apply'
#   name: 'hashicorp/terraform:1.2.5'
#   entrypoint: 'sh'
#   args:
#   - '-c'
#   - |
#       if [ -d "environments/$BRANCH_NAME/" ]; then
#         cd environments/$BRANCH_NAME
#         terraform apply -auto-approve
#       else
#         echo "***************************** SKIPPING APPLYING *******************************"
#         echo "Branch '$BRANCH_NAME' does not represent an oficial environment."
#         echo "*******************************************************************************"
#       fi
